<style>

  .experts-wrapper{
max-width : 1400px;
 min-height : 100vh;
    margin : auto;
    padding : 50px;
    display : flex;
    flex-direction : row;
    
  }
 .experts-wrapper .experts-wrapper-left{
    background-color : blue;
    min-height : 100%;
    width : 25%;
  }
  .experts-wrapper  .experts-wrapper-right{
    background-color : black;
   min-height : 100%;
    width : 75%;
  }
  .experts-inner-wrapper {
  width: 100%;
  position: relative;
}
.experts-inner-wrapper i {
  top: 50%;
  height: 50px;
  width: 50px;
  cursor: pointer;
  font-size: 1.25rem;
  position: absolute;
  text-align: center;
  line-height: 50px;
  background: #fff;
  border-radius: 50%;
  box-shadow: 0 3px 6px rgba(0,0,0,0.23);
  transform: translateY(-50%);
  transition: transform 0.1s linear;
}
.experts-inner-wrapper i:active{
  transform: translateY(-50%) scale(0.85);
}
.experts-inner-wrapper i:first-child{
  left: -22px;
}
.experts-inner-wrapper i:last-child{
  right: -22px;
}
.experts-inner-wrapper .expertsCarousel{
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: calc((100% / 3) - 12px);
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  gap: 16px;
  border-radius: 8px;
  scroll-behavior: smooth;
  scrollbar-width: none;
}
.expertsCarousel::-webkit-scrollbar {
  display: none;
}
.expertsCarousel.no-transition {
  scroll-behavior: auto;
}
.expertsCarousel.dragging {
  scroll-snap-type: none;
  scroll-behavior: auto;
}
.expertsCarousel.dragging .card {
  cursor: grab;
  user-select: none;
}
.expertsCarousel :where(.card, .img) {
  display: flex;
  justify-content: center;
  align-items: center;
}
.expertsCarousel .card {
  scroll-snap-align: start;
  height: 342px;
  list-style: none;
  background: #fff;
  cursor: pointer;
  padding-bottom: 15px;
  flex-direction: column;
  border-radius: 8px;
}
.expertsCarousel .card .img {
  background: #8B53FF;
  height: 148px;
  width: 148px;
  border-radius: 50%;
}
.card .img img {
  width: 140px;
  height: 140px;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid #fff;
}
.expertsCarousel .card h2 {
  font-weight: 500;
  font-size: 1.56rem;
  margin: 30px 0 5px;
}
.expertsCarousel .card span {
  color: #6A6D78;
  font-size: 1.31rem;
}
@media screen and (max-width: 900px) {
  .wrapper .expertsCarousel {
    grid-auto-columns: calc((100% / 2) - 9px);
  }
}
@media screen and (max-width: 600px) {
  .wrapper .expertsCarousel {
    grid-auto-columns: 100%;
  }
}
  
</style>
<div class="experts-wrapper">
  <div class="experts-wrapper-left"></div>
    <div class="experts-wrapper-right">
       <div class="experts-inner-wrapper">
      <i id="left" class="fa-solid fa-angle-left"></i>
      <ul class="expertsCarousel">
        <li class="card">
          <div class="img"><img src="images/img-1.jpg" alt="img" draggable="false"></div>
          <h2>Blanche Pearson</h2>
          <span>Sales Manager</span>
        </li>
        <li class="card">
          <div class="img"><img src="images/img-2.jpg" alt="img" draggable="false"></div>
          <h2>Joenas Brauers</h2>
          <span>Web Developer</span>
        </li>
        <li class="card">
          <div class="img"><img src="images/img-3.jpg" alt="img" draggable="false"></div>
          <h2>Lariach French</h2>
          <span>Online Teacher</span>
        </li>
        <li class="card">
          <div class="img"><img src="images/img-4.jpg" alt="img" draggable="false"></div>
          <h2>James Khosravi</h2>
          <span>Freelancer</span>
        </li>
        <li class="card">
          <div class="img"><img src="images/img-5.jpg" alt="img" draggable="false"></div>
          <h2>Kristina Zasiadko</h2>
          <span>Bank Manager</span>
        </li>
        <li class="card">
          <div class="img"><img src="images/img-6.jpg" alt="img" draggable="false"></div>
          <h2>Donald Horton</h2>
          <span>App Designer</span>
        </li>
      </ul>
      <i id="right" class="fa-solid fa-angle-right"></i>
    </div>
    </div>
</div>
<script>
  const wrapper = document.querySelector(".wrapper");
const expertsCarousel = document.querySelector(".expertsCarousel");
const firstCardWidth = expertsCarousel.querySelector(".card").offsetWidth;
const arrowBtns = document.querySelectorAll(".wrapper i");
const expertsCarouselChildrens = [...expertsCarousel.children];

let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;

// Get the number of cards that can fit in the expertsCarousel at once
let cardPerView = Math.round(expertsCarousel.offsetWidth / firstCardWidth);

// Insert copies of the last few cards to beginning of expertsCarousel for infinite scrolling
expertsCarouselChildrens.slice(-cardPerView).reverse().forEach(card => {
    expertsCarousel.insertAdjacentHTML("afterbegin", card.outerHTML);
});

// Insert copies of the first few cards to end of expertsCarousel for infinite scrolling
expertsCarouselChildrens.slice(0, cardPerView).forEach(card => {
    expertsCarousel.insertAdjacentHTML("beforeend", card.outerHTML);
});

// Scroll the expertsCarousel at appropriate postition to hide first few duplicate cards on Firefox
expertsCarousel.classList.add("no-transition");
expertsCarousel.scrollLeft = expertsCarousel.offsetWidth;
expertsCarousel.classList.remove("no-transition");

// Add event listeners for the arrow buttons to scroll the expertsCarousel left and right
arrowBtns.forEach(btn => {
    btn.addEventListener("click", () => {
        expertsCarousel.scrollLeft += btn.id == "left" ? -firstCardWidth : firstCardWidth;
    });
});

const dragStart = (e) => {
    isDragging = true;
    expertsCarousel.classList.add("dragging");
    // Records the initial cursor and scroll position of the expertsCarousel
    startX = e.pageX;
    startScrollLeft = expertsCarousel.scrollLeft;
}

const dragging = (e) => {
    if(!isDragging) return; // if isDragging is false return from here
    // Updates the scroll position of the expertsCarousel based on the cursor movement
    expertsCarousel.scrollLeft = startScrollLeft - (e.pageX - startX);
}

const dragStop = () => {
    isDragging = false;
    expertsCarousel.classList.remove("dragging");
}

const infiniteScroll = () => {
    // If the expertsCarousel is at the beginning, scroll to the end
    if(expertsCarousel.scrollLeft === 0) {
        expertsCarousel.classList.add("no-transition");
        expertsCarousel.scrollLeft = expertsCarousel.scrollWidth - (2 * expertsCarousel.offsetWidth);
        expertsCarousel.classList.remove("no-transition");
    }
    // If the expertsCarousel is at the end, scroll to the beginning
    else if(Math.ceil(expertsCarousel.scrollLeft) === expertsCarousel.scrollWidth - expertsCarousel.offsetWidth) {
        expertsCarousel.classList.add("no-transition");
        expertsCarousel.scrollLeft = expertsCarousel.offsetWidth;
        expertsCarousel.classList.remove("no-transition");
    }

    // Clear existing timeout & start autoplay if mouse is not hovering over expertsCarousel
    clearTimeout(timeoutId);
    if(!wrapper.matches(":hover")) autoPlay();
}

const autoPlay = () => {
    if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
    // Autoplay the expertsCarousel after every 2500 ms
    timeoutId = setTimeout(() => expertsCarousel.scrollLeft += firstCardWidth, 2500);
}
autoPlay();

expertsCarousel.addEventListener("mousedown", dragStart);
expertsCarousel.addEventListener("mousemove", dragging);
document.addEventListener("mouseup", dragStop);
expertsCarousel.addEventListener("scroll", infiniteScroll);
wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
wrapper.addEventListener("mouseleave", autoPlay);
</script>
{% schema %}
  {
    "name": "purefem experts",
    "settings": [],
     "presets" : [{"name" : "purefem experts"}]
  }
{% endschema %}