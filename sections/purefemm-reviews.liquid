{{ 'homepage.css' | asset_url | stylesheet_tag }}


      <div class="testimonials">
        <div class="testimonial-heading">
          <div class="heading-wrapper">
            <h1 class="about-heading-1">A great taste of words</h1>
            <h1 class="about-heading-2">from our customers</h1>
          </div>
          <div class="right-icon">
             <img
                src="https://cdn.shopify.com/s/files/1/0631/5743/6566/files/Frame_3.svg?v=1707212091"
                alt=""
              />
          </div>
        </div>
     <div class="wrapper-testimonial">
      <ul class="carousel">
        {% for block in section.blocks %}
        <li class="card">
          <div class="testimonial-top-wrap">
          <div class="first-line">
           <img src="{{ block.settings.reviewer-image | img_url : 'master' }}" alt="img" draggable="false">
          <h2 class="testimonial-name">{{ block.settings.first-name }} <span>{{ block.settings.last-name }}</span></h2>
         </div>
          <p>
            {{ block.settings.review-text }}
          </p>
           <img class="rating" src="https://cdn.shopify.com/s/files/1/0631/5743/6566/files/Group_142.png?v=1707479252" alt="img" draggable="false">
      </div>
             <img class="verified-customer" src="https://cdn.shopify.com/s/files/1/0631/5743/6566/files/verified.svg?v=1707479252" alt="img" draggable="false">
          </li>
        {% endfor %}    
      </ul>
    </div>
      </div>

    <script>
      const wrapper = document.querySelector(".wrapper-testimonial");
const carousel = document.querySelector(".carousel");
const firstCardWidth = carousel.querySelector(".card").offsetWidth;
const arrowBtns = document.querySelectorAll(".wrapper i");
const carouselChildrens = [...carousel.children];

let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;

// Get the number of cards that can fit in the carousel at once
let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);

// Insert copies of the last few cards to beginning of carousel for infinite scrolling
carouselChildrens.slice(-cardPerView).reverse().forEach(card => {
    carousel.insertAdjacentHTML("afterbegin", card.outerHTML);
});

// Insert copies of the first few cards to end of carousel for infinite scrolling
carouselChildrens.slice(0, cardPerView).forEach(card => {
    carousel.insertAdjacentHTML("beforeend", card.outerHTML);
});

// Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox
carousel.classList.add("no-transition");
carousel.scrollLeft = carousel.offsetWidth;
carousel.classList.remove("no-transition");

// Add event listeners for the arrow buttons to scroll the carousel left and right
arrowBtns.forEach(btn => {
    btn.addEventListener("click", () => {
        carousel.scrollLeft += btn.id == "left" ? -firstCardWidth : firstCardWidth;
    });
});

const dragStart = (e) => {
    isDragging = true;
    carousel.classList.add("dragging");
    // Records the initial cursor and scroll position of the carousel
    startX = e.pageX;
    startScrollLeft = carousel.scrollLeft;
}

const dragging = (e) => {
    if(!isDragging) return; // if isDragging is false return from here
    // Updates the scroll position of the carousel based on the cursor movement
    carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
}

const dragStop = () => {
    isDragging = false;
    carousel.classList.remove("dragging");
}

const infiniteScroll = () => {
    // If the carousel is at the beginning, scroll to the end
    if(carousel.scrollLeft === 0) {
        carousel.classList.add("no-transition");
        carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);
        carousel.classList.remove("no-transition");
    }
    // If the carousel is at the end, scroll to the beginning
    else if(Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {
        carousel.classList.add("no-transition");
        carousel.scrollLeft = carousel.offsetWidth;
        carousel.classList.remove("no-transition");
    }

    // Clear existing timeout & start autoplay if mouse is not hovering over carousel
    clearTimeout(timeoutId);
    if(!wrapper.matches(":hover")) autoPlay();
}

const autoPlay = () => {
    if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
    // Autoplay the carousel after every 2500 ms
    timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2500);
}
autoPlay();

carousel.addEventListener("mousedown", dragStart);
carousel.addEventListener("mousemove", dragging);
document.addEventListener("mouseup", dragStop);
carousel.addEventListener("scroll", infiniteScroll);
wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
wrapper.addEventListener("mouseleave", autoPlay);
    </script>
{% schema %}
  {
    "name": "reviews",
    "settings": [],
     "blocks": [
    {
      "type": "reviews",
      "name": "reviews",
      "limit": 5,
    
    "settings": [
      {
         "type": "image_picker",
        "id": "reviewer-image",
        "label": "reviewer-image"
      },
      {
        "type": "text",
        "id": "first-name",
        "label": "first-name" 
      },
       {
        "type": "text",
        "id": "last-name",
        "label": "last-name" 
      },
      {
        "type": "richtext",
        "id": "review-text",
        "label": "review-text" 
      }
      
    ]
  
    }
  ],
    "presets" : [{"name" : "purefem reviews"}]
  }
{% endschema %}